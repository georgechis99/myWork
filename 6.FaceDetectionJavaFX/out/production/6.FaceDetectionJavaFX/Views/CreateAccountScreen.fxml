<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.Cursor?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Hyperlink?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.PasswordField?>
<?import javafx.scene.control.SplitPane?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.effect.DropShadow?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>

<AnchorPane fx:id="anchorPane" prefHeight="500.0" prefWidth="800.0" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="Controllers.CreateAccountScreenController">
   <children>
      <SplitPane fx:id="splitPane" dividerPositions="0.5" layoutX="178.0" layoutY="133.0" orientation="VERTICAL" prefHeight="500.0" prefWidth="800.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <items>
            <ImageView fitHeight="152.0" fitWidth="800.0" pickOnBounds="true" preserveRatio="true">
               <image>
                  <Image url="@../Resources/background800x150.jpg" />
               </image>
               <cursor>
                  <Cursor fx:constant="DEFAULT" />
               </cursor>
            </ImageView>
          <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="100.0" prefWidth="160.0">
               <children>
                  <SplitPane dividerPositions="0.3" layoutX="182.0" layoutY="64.0" prefHeight="346.4" prefWidth="798.4" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
                    <items>
                      <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0" style="-fx-background-color: black;">
                           <children>
                              <TextArea editable="false" opacity="0.5" prefHeight="340.8" prefWidth="237.6" text="&lt;&gt;This app is designed to demonstrate the Haar Cascade algorithm in a Face Recognition user interface.&lt;&gt;Haar Cascade is a machine learning object detection algorithm used to identify objects in an image or video and based on the concept of ​​ features proposed by Paul Viola and Michael Jones in their paper &quot;Rapid Object Detection using a Boosted Cascade of Simple Features&quot; in 2001.&lt;&gt;Haar-like features are digital image features used in object recognition. They owe their name to their intuitive similarity with Haar wavelets and were used in the first real-time face detector.[1]Historically, working with only image intensities (i.e., the RGB pixel values at each and every pixel of image) made the task of feature calculation computationally expensive. A publication by Papageorgiou et al.[2] discussed working with an alternate feature set based on Haar wavelets instead of the usual image intensities. Paul Viola and Michael Jones[1] adapted the idea of using Haar wavelets and developed the so-called Haar-like features. A Haar-like feature considers adjacent rectangular regions at a specific location in a detection window, sums up the pixel intensities in each region and calculates the difference between these sums. This difference is then used to categorize subsections of an image. For example, with a human face, it is a common observation that among all faces the region of the eyes is darker than the region of the cheeks. Therefore, a common Haar feature for face detection is a set of two adjacent rectangles that lie above the eye and the cheek region. The position of these rectangles is defined relative to a detection window that acts like a bounding box to the target object (the face in this case).In the detection phase of the Viola–Jones object detection framework, a window of the target size is moved over the input image, and for each subsection of the image the Haar-like feature is calculated. This difference is then compared to a learned threshold that separates non-objects from objects. Because such a Haar-like feature is only a weak learner or classifier (its detection quality is slightly better than random guessing) a large number of Haar-like features are necessary to describe an object with sufficient accuracy. In the Viola–Jones object detection framework, the Haar-like features are therefore organized in something called a classifier cascade to form a strong learner or classifier.The key advantage of a Haar-like feature over most other features is its calculation speed. Due to the use of integral images, a Haar-like feature of any size can be calculated in constant time (approximately 60 microprocessor instructions for a 2-rectangle feature).&lt;&gt;" wrapText="true" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0" />
                           </children></AnchorPane>
                      <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0" style="-fx-background-color: lightgrey;">
                           <children>
                              <VBox layoutX="39.0" layoutY="90.0" prefHeight="163.0" prefWidth="166.0" spacing="5.0">
                                 <children>
                                    <Label text="Username" />
                                    <TextField fx:id="usernameField" />
                                    <Label text="Password" />
                                    <PasswordField fx:id="passwordField" />
                                    <Label text="Phone Number" />
                                    <TextField fx:id="phoneNumberField" promptText="+40XXX-XXX-XXX" />
                                 </children>
                              </VBox>
                              <HBox opacity="0.69" prefHeight="64.0" prefWidth="554.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
                                 <children>
                                    <Label prefHeight="66.0" prefWidth="554.0" text="Create an account">
                                       <font>
                                          <Font name="System Bold" size="40.0" />
                                       </font>
                                       <HBox.margin>
                                          <Insets bottom="5.0" left="5.0" right="5.0" top="5.0" />
                                       </HBox.margin>
                                       <padding>
                                          <Insets left="10.0" />
                                       </padding>
                                       <effect>
                                          <DropShadow height="80.58" radius="46.3425" spread="0.34" width="106.79" />
                                       </effect>
                                    </Label>
                                 </children>
                              </HBox>
                              <Button fx:id="readyButton" layoutX="39.0" layoutY="274.0" mnemonicParsing="false" prefHeight="26.0" prefWidth="97.0" text="Ready!">
                                 <cursor>
                                    <Cursor fx:constant="HAND" />
                                 </cursor></Button>
                              <Hyperlink layoutX="450.0" layoutY="275.0" onMouseClicked="#backToSplashScreen" text="Back to login" />
                              <VBox layoutX="247.0" layoutY="108.0" prefHeight="134.0" prefWidth="262.0" spacing="10.0">
                                 <children>
                                    <Label fx:id="userLabel" text="*Username should be at least 6 cheracters long" textFill="GREY" />
                                    <Label fx:id="passwordLabel" prefHeight="34.0" prefWidth="267.0" text="*Password should contain at least : 6 characters, 1 uppercase letter, 1 number" textFill="GREY" wrapText="true" />
                                    <Label fx:id="phoneNumberLabel" text="*Phone number format : 2 prefix digits (eg. +40) , 10 digits (eg. 0787-654-321)" textFill="GREY" wrapText="true" />
                                 </children>
                              </VBox>
                           </children>
                        </AnchorPane>
                    </items>
                  </SplitPane>
               </children>
            </AnchorPane>
        </items>
      </SplitPane>
   </children>
   <effect>
      <DropShadow />
   </effect>
</AnchorPane>
